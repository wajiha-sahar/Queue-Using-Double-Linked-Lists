#include<iostream>
using namespace std;
struct Node
	{
		int data;
		Node* next = NULL;
		Node* previous = NULL;

	}*top= NULL, * rear= NULL;

void add_q(int element)
{
	Node* temp;
	temp = new Node;
	temp->data = element;
	if (top == NULL)
	{
		top = temp;
	}
	else
	{
		Node* s = top;
		while (s->next != NULL)
		{
			s = s->next;
		}
		temp->previous = s;
		s->next = temp;
		temp->next = NULL;
		rear = temp;
	}
	cout << "Data added to queue.\n";
}

int dequeue()
{
	Node* temp = top;
	int d;
	if (top == NULL)
	{
		printf("Queue is empty.\n Returning Garabbage Value");
		return -1;
	}
	else if (temp->next == NULL)
	{
		d = temp->data;
		top = NULL;
		delete temp;
	}
	else
	{
		d = temp->data;
		top = temp->next;
		temp->next->previous = NULL;
		temp->next = NULL;
		delete temp;
	}
	return d;
}

void display()
{
	Node* temp = top;
	if (temp == NULL)
	{
		cout << "Empty Queue" << endl;
	}
	else
	{
		cout << "Queue: ";
		while (temp != NULL)
		{
			cout << temp->data << "\t";
			temp = temp->next;
		};
	}

}
int main()
{
	int choice, data;
	while (1)
	{
		/* Menu */
		cout << "------------------------------------\n";
		cout << "    Queue IMPLEMENTATION PROGRAM    \n";
		cout << "------------------------------------\n";
		cout << "1. Add\n";
		cout << "2. Delete\n";
		cout << "3. Exit\n";
		cout << "4. Display\n";
		cout << "------------------------------------\n";
		cout << "Enter your choice: ";
		cin >> choice;

		switch (choice)
		{
		case 1:
			cout << "Enter data to add into queue: ";
			cin >> data;
			add_q(data);
			break;

		case 2:
			data = dequeue();
			cout << data;
			break;

		case 3:
			cout << "Exiting from app.\n";
			exit(0);
			break;
		case 4:
			display();
			break;
		default:
			printf("Invalid choice, please try again.\n");
		}
		printf("\n\n");
	}
	return 0;
}
